# level 6 - 함수
# 4673번  셀프 넘버

# 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
# 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 
# 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 이런식으로 다음과 같은 수열을 만들 수 있다.
# 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
# n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 
# 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 
# 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97




#셀프 넘버인지 아닌지 판별한 뒤, 셀프넘버가 아니라면 리스트에서 제외하는 함수 정의
def self_num(num):
    for n in range(1, 10):
        d_n = n + n 
        num[d_n] = 0 #셀프넘버가 아니라면 리스트에서 0으로 바꾸기
    for n in range(10, 100):
        d_n = n + int(n/10) + n%10
        num[d_n] = 0
    for n in range(100, 1000):
        d_n = n + int(n/100) + int(n/10)%10 + n%10
        num[d_n] = 0
    for n in range(1000, 10000):
        d_n = n + n%10 + int(n/10)%10 + int(n/100)%10 + int(n/1000)
        if(d_n < 10000): #10000보다 커지면 고려 대상에서 벗어남
            num[d_n] = 0
    
    return num

    

if __name__ == "__main__":
    number = list(range(10000))

    self_num(number)

    for i in range(10000):
        if number[i] != 0:
            print(number[i])





#특정 범위의 정수로 구성된 리스트를 만들고 싶다면 range()함수를 활용하기
#list(range(7))  -->  [0, 1, 2, 3, 4, 5, 6]
#list(range(3, 8))  -->  [3, 4, 5, 6, 7]
#list(range(3, 13, 2))  ->  [3, 5, 7, 9, 11]

