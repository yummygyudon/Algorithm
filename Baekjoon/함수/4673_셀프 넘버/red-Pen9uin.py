# 작성자: red-Pen9uin
# level 6: function
# 4673: 셀프 넘버
"""
양의 정수 n에 대해서
d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자.
예를 들어, d(75) = 75+7+5 = 87이다.

양의 정수 n이 주어졌을 때,
이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...
과 같은 무한 수열을 만들 수 있다. 

예를 들어, 33으로 시작한다면
다음 수는 33 + 3 + 3 = 39이고,
그 다음 수는 39 + 3 + 9 = 51,
다음 수는 51 + 5 + 1 = 57이다.
이런식으로 다음과 같은 수열을 만들 수 있다.

33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...

n을 d(n)의 생성자라고 한다.
위의 수열에서 33은 39의 생성자이고,
39는 51의 생성자,
51은 57의 생성자이다.
생성자가 한 개보다 많은 경우도 있다.
예를 들어, 101은 생성자가 2개(91과 100) 있다. 

생성자가 없는 숫자를 셀프 넘버라고 한다.
100보다 작은 셀프 넘버는 총 13개가 있다.
 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97

10000보다 작거나 같은 셀프 넘버를
한 줄에 하나씩 출력하는 프로그램을 작성하시오.

"""

def sel_number_mod(num: int = 10000) -> None:
    """
    모든 10000 이하의 not self number인 n은 아래와 같은 식에 의해 만들어진다.
    n = abcd + a + b + c + d
      = (1000*a + 100*b + 10*c + 1*d) + a+b+c+d
      = 1001*a + 101*b + 11*c + 2*d
    따라서 1001, 101, 11, 2로 순차적으로 나누어
    생기는 나머지가 0이 아닌 것들은 self_number일 것이다.
    """
    # ... 라고 생각했는데,
    # 14 = 7 + 7 처럼 단순히 나누는 것만으로는 찾을 수 없는 값들이 존재했다.
    # 하나하나 체크하는 방식으로 해결하기로 함.
    for i in range(1, 1+num):
        now = i
        now %= 1001
        now %= 101
        now %= 11
        now %= 2
        if now:
            print(i)


###############################################

def self_number(num: int = 10000) -> list:
    """num개의 숫자에 대해 self_number인지 체크해 결과를 반환하는 함수"""
    # 리턴값을 저장할 함수 
    check = [True]*(num+1)

    for i in range(0, num+1):
        tmp = i
        sum = tmp
        while tmp>0 :
            sum += tmp%10
            tmp //= 10
        
        if(sum<=num) :
            check[sum] = False
    
    return check

if __name__ == "__main__":
    result = self_number()
    # result = self_number_mod()
    for i in range(0, len(result)):
        if result[i] :
            print(i)