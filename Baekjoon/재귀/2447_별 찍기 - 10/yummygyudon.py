# 분명 정사각형이라했는데.... 왜 직사각형이 보이지... 착시보소..

# 입력된 수를 3으로 계속 나누면서 3의 패턴을 반복시키는 재귀
# 3의 패턴을 찍는 함수를 재귀호출하면 된다.
# 제곱수만큼 규모가 배가됨 3*3 / 9*9 / 27*27 ... 최소단계부터 패턴이 정사각형으로 붙여지는 꼴
# "단계마다" "패턴"이 적용되기때문에 다중배열 사용
# 패턴 배열 예시 : [["*","*","*"], ["*"," ","*"], ["*","*","*"]] <- ["*"]*3, ["*"]+[" "]+["*"], ["*"]*3
# 0,2번째 줄 : *** , 1번째 줄 : * * 이다.

def pattern_3(num) :
    if num == 1 : # 3이되면 종료되게끔 종료조건 _ 27 - 9 - 3 - 1
        return ["*"] # 각 단계 분리후에 복사할 수 있는 별 넣어놓기
    Patterns = pattern_3(num//3) # 단계별 분리

    Screen = [] # 4차때부터 패턴 복사 시작
    # 4차때 만들어진 전체 Screen이 3차로 재귀되었을 땐 하나의 블록이 되도록 다중 배열 생성
    for p in Patterns :
        Screen.append(p*3) # *** : 단계별 첫째줄 블록 1,2,3
    for p in Patterns:
        Screen.append(p+' '*(num//3)+p)  # 단계별 둘째줄 블록 4,5,6
        # * * _ 몫이 1이 된 후부터 시작 & 단계마다 5번째 칸엔 빈칸이 들어가야함 (' '*(num//3))
    for p in Patterns:
        Screen.append(p * 3)  # *** : # 단계별 둘째줄 블록 7,8,9
    return Screen # 단계 끝
    # [***,
    # * *,
    # ***] 4차 - 3의 패턴 (Screen)

    # [[***,  [***, [***,
    # * *,    * *,  * *,
    # ***],   ***], ***]],
    # [[***],   [[ ],   [[***],
    # [* *],    [ ],    [* *],
    # [***]],   [ ]],   [***]]
    # [[***],   [[***], [[***],
    # [* *],    [* *],  [* *],
    # [***]],   [***]], [***]]] 3차
    # .... 2차 (위와 같은 확장)
    # ... 1차 (위와 같이 확장

#패턴들이 다만들어졌으니
num = int(input())
# print(pattern_3(num))
# 9일 경우
# ['*********', '* ** ** *', '*********', '***   ***', '* *   * *', '***   ***', '*********', '* ** ** *', '*********']
# join으로 전체 배열 이어붙여서 출력
print('\n'.join(pattern_3(num)))

## 시간 : 84ms / 메모리 : 40208KB