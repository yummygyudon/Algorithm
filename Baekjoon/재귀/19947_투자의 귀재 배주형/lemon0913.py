# 재귀 (단계별 & 실버5)
# 19947_투자의 귀재 배주형

if __name__ == "__main__":
    H, Y = list(map(int, input().split()))
    dp = [0] * (Y+1) #dp값을 저장할 배열 만들기
    dp[0] = H

    # dp[1]~dp[Y]까지 값 채우기
    for i in range(1, Y+1):
        if i >= 5:
            dp[i] = int(max(dp[i-1]*1.05, dp[i-3]*1.2, dp[i-5]*1.35))
        elif i >= 3:
            dp[i] = int(max(dp[i-1]*1.05, dp[i-3]*1.2))
        else:
            dp[i] = int(dp[i-1]*1.05)
    
    print(dp[Y])



# 동적계획법이라니....ㅠㅜㅠ
# 초기투자비용을 10,000으로 가정했을 때
# dp[i] = max(dp[i-1]*1.05, dp[i-3]*1.2, dp[i-5]*1.35)
# 1년 뒤 얻을 수 있는 최대금액은
# dp[1] = dp[0] *1.05 = 10,000 * 1.05=10,500
# 2년 뒤 얻을 수 있는 최대 금액은
# dp[2] = dp[1] * 1.05 = 10,500  *1.05=11,025,
# 3년 뒤 얻을 수 있는 최대 금액은
# dp[3] = max(dp[2] * 1.05 , dp[0] * 1.2) = max(11,025 * 1.05, 10000*1.2) = max (11,576, 12,000) = 12000
# 4년 뒤에 얻을 수 있는 금액은
# dp[4] = max(dp[3] * 1.05 , dp[1] * 1.2) = max(12000* 1.05, 10500*1.2) = max(12,600, 12,600) = 12600
# 5년 뒤에 얻을 수 있는 금액은
# dp[5] = max(dp[4] * 1.05, dp[2] * 1.2 , dp[0] * 1.35) = max(12600* 1.05, 11,025*1.2, 10,000* 1.35)
#        = max(13,230, 13,230, 13,500 ) = 13500

